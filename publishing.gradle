apply plugin: "digital.wup.android-maven-publish"
apply plugin: "signing"

publishing {
  publications {
    basicJar(MavenPublication) {
      switch (POM_PACKAGING) {
        case "jar":
          from components.java
          break

        case "aar":
          from components.android
          break
      }

      artifact sourcesJar
      artifact javadocsJar

      pom {
        artifactId = POM_ARTIFACT_ID
        name = POM_NAME
        packaging = POM_PACKAGING
        description = POM_DESCRIPTION
        url = POM_URL

        scm {
          connection = POM_SCM_CONNECTION
          developerConnection = POM_SCM_DEV_CONNECTION
          url = POM_SCM_URL
        }

        licenses {
          license {
            name = POM_LICENCE_NAME
            url = POM_LICENCE_URL
          }
        }

        developers {
          developer {
            id = "io7m"
            name = "Mark Raynsford"
            email = "code@io7m.com"
            url = "https://www.io7m.com"
          }
        }
      }
    }
  }

  repositories {
    if (useDirectoryPublish) {
      logger.info("Using ${useDirectoryPublishPath} for publication")

      maven {
        name = "Directory"
        url = "file://${useDirectoryPublishPath}"
      }
    }

    if (version.endsWith("SNAPSHOT")) {
      logger.info("Using Sonatype snapshots repository for publication")
      maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
        credentials(PasswordCredentials) {
          username mavenCentralUsername
          password mavenCentralPassword
        }
      }
    }
  }
}

signing {
  useGpgCmd()
  sign publishing.publications.basicJar
}

tasks.withType(Sign) { task ->
  def isSnapshot = version.endsWith("SNAPSHOT")

  // Sign release versions only; not snapshots
  onlyIf {
    if (isSnapshot) {
      logger.warn("$POM_NAME: '$version' is a snapshot version; artifacts will not be signed")
    } else {
      logger.info("$POM_NAME: '$version' is a release version; artifacts will be signed")
    }
    return !isSnapshot
  }
}