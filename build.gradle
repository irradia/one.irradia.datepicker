buildscript {
  if ("$gradle.gradleVersion" != "6.3") {
    throw new GradleException("Gradle version 6.3 is required (received $gradle.gradleVersion)")
  }

  // https://github.com/gradle/gradle/issues/11308#issuecomment-554317655
  if (System.properties['org.gradle.internal.publish.checksums.insecure'] != 'true') {
    throw new GradleException("org.gradle.internal.publish.checksums.insecure must be 'true'")
  }

  ext.kotlin_version = "1.3.72"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.1.1"
    classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:0.16.0"
    classpath "digital.wup:android-maven-publish:3.6.3"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.android.tools.build:gradle:4.0.1"
    classpath "de.undercouch:gradle-download-task:4.1.1"
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.29.0"
  id "com.vanniktech.android.junit.jacoco" version "0.16.0"
  id "ru.vyarus.animalsniffer" version "1.5.1"

  // Deprecated: Migrate to maven-publish.
  //             https://developer.android.com/studio/build/maven-publish-plugin
  id "digital.wup.android-maven-publish" version "3.6.3"
  id "me.champeau.gradle.japicmp" version "0.2.9"
}

ext {
  androidBuildToolsVersion = "29.0.2"
  androidCompileSDKVersion = 28
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 28

  if (!project.hasProperty("mavenCentralUsername")) {
    logger.warn("No mavenCentralUsername property specified: Using an empty value")
    mavenCentralUsername = ""
  }
  if (!project.hasProperty("mavenCentralPassword")) {
    logger.warn("No mavenCentralPassword property specified: Using an empty value")
    mavenCentralPassword = ""
  }

  if (project.hasProperty("one.irradia.directory.publish")) {
    useDirectoryPublishPath = project.property("one.irradia.directory.publish")
    useDirectoryPublish = true
    logger.warn("one.irradia.directory.publish is set: We will publish artifacts to ${useDirectoryPublishPath}")
  } else {
    logger.warn("one.irradia.directory.publish is not set: We will not publish artifacts to a custom directory")
    useDirectoryPublish = false
    useDirectoryPublishPath = null
  }

  junitVersion = "5.7.0-M1"
}

subprojects {
  //
  // We currently have transitive dependencies that specify dependencies on newer versions
  // of SLF4J. These are subtly incompatible with Logback-Android, and it will be a while before
  // new versions appear of both artifacts. Remove this when both are updated!
  //
  configurations.all {
    resolutionStrategy.force libraries.slf4j
  }
}

ext.libraries = [
  androidXActivity        : "androidx.activity:activity:1.1.0",
  androidXAppCompat       : "androidx.appcompat:appcompat:1.0.2",
  androidXConstraintLayout: "androidx.constraintlayout:constraintlayout:1.1.3",
  autoValue               : "com.google.auto.value:auto-value-annotations:1.7",
  autoValueProcessor      : "com.google.auto.value:auto-value:1.7",
  javaxAnnotationAPI      : "javax.annotation:javax.annotation-api:1.2-b01",
  jcipAnnotations         : "com.github.stephenc.jcip:jcip-annotations:1.0-1",
  jodaTime                : "joda-time:joda-time:2.10.6",
  junit                   : "junit:junit:4.12",
  kotlinStdlib            : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
  logbackAndroidClassic   : "com.github.tony19:logback-android-classic:1.1.1-6",
  logbackAndroidCore      : "com.github.tony19:logback-android-core:1.1.1-6",
  logbackClassic          : "ch.qos.logback:logback-classic:1.2.3",
  mockitoAndroid          : "org.mockito:mockito-android:2.22.0",
  slf4j                   : "org.slf4j:slf4j-api:1.7.25",
]

apply plugin: "com.vanniktech.android.junit.jacoco"
apply plugin: "de.undercouch.download"

allprojects { project ->
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]

  configurations {
    baselineVersioning
  }
}

// Configure all projects
subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-21:5.0.1_r2@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          useLibrary 'org.apache.http.legacy'
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'
          animationsDisabled = true
        }
      }

      dependencies {
        baselineVersioning(group: "${GROUP}", name: "${POM_ARTIFACT_ID}", configuration: 'default') {
          version "${VERSION_NAME_PREVIOUS}"
          transitive = false
        }
      }

      afterEvaluate {
        def scandoVersion = "0.0.3"
        def scandoSHA256 = "89a5ce633a4f3b81d6bdbb389523e1409bfcf3895e57e51f6880be1252dc289b"
        def scandoSource = "https://repo1.maven.org/maven2/com/io7m/scando/com.io7m.scando.cmdline/${scandoVersion}/com.io7m.scando.cmdline-${scandoVersion}-main.jar"
        def scandoTarget = "${project.rootDir}/build/bin/scando.jar"

        task scandoMakeDirectories() {
          mkdir "${project.rootDir}/build/bin/"
          mkdir "${project.buildDir}/baseline/"
        }

        task scandoDownload(type: Download, dependsOn: scandoMakeDirectories) {
          src scandoSource
          dest scandoTarget
          overwrite false
        }

        task scandoDownloadVerify(type: Verify, dependsOn: scandoDownload) {
          src scandoTarget
          checksum scandoSHA256
          algorithm 'SHA-256'
        }

        task scandoUnzipBaseline(type: Copy) {
          def baselineConfig = project.configurations.getByName("baselineVersioning")
          def baselineFile = baselineConfig.singleFile
          def outputDir = file("${buildDir}/baseline/")
          from(zipTree(baselineFile)) {
            rename { 'baseline-classes.jar' }
          }
          include 'classes.jar'
          into outputDir
        }

        task scandoUnzipCurrent(type: Copy, dependsOn: assemble) {
          def baselineFile = file("${buildDir}/outputs/aar/${POM_ARTIFACT_ID}-debug.aar")
          def outputDir = file("${buildDir}/baseline/")
          from(zipTree(baselineFile)) {
            rename { 'current-classes.jar' }
          }
          include 'classes.jar'
          into outputDir
        }

        task scandoAnalyze(type: Exec, dependsOn: [scandoUnzipBaseline, scandoUnzipCurrent, scandoDownloadVerify]) {
          commandLine = [
            "java",
            "-jar",
            scandoTarget,
            "--excludeList",
            "${project.rootDir}/VERSIONING.txt",
            "--oldJar",
            "${buildDir}/baseline/baseline-classes.jar",
            "--oldJarVersion",
            "${VERSION_NAME_PREVIOUS}",
            "--newJar",
            "${buildDir}/baseline/current-classes.jar",
            "--newJarVersion",
            "${VERSION_NAME}",
            "--textReport",
            "${project.buildDir}/baseline/report.txt",
            "--htmlReport",
            "${project.buildDir}/baseline/report.html"
          ]
        }

        task verifySemanticVersioning(dependsOn: [scandoAnalyze]) {

        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  repositories {
    mavenLocal()
    mavenCentral()
    google()

    // Sonatype snapshots
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    maven { url "https://jitpack.io" }
    jcenter()
  }
}

// Configure publishing for appropriate projects
configure(subprojects.findAll { !it.plugins.hasPlugin('com.android.application') }) { project ->
  println("Configuring publishing for ${project} (${POM_PACKAGING})")
  apply from: file("$rootDir/publishing.gradle")
}

// Add ktlint to all kotlin projects
configure(subprojects.findAll {
  it.plugins.hasPlugin('kotlin') || it.plugins.hasPlugin('kotlin-android')
}) {
  apply from: file("$rootDir/ktlint.gradle")
}
